import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'dev.architectury.loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_name
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }

    maven { url "https://maven.shedaniel.me/" }

    maven {
        url "https://maven.su5ed.dev/releases"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "net.minecraft:minecraft:${project.minecraft_version}"
    mappings loom.layered {
        it.mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
        it.mappings("dev.architectury:yarn-mappings-patch-neoforge:${project.yarn_mappings_patch_version}")
    }
    neoForge "net.neoforged:neoforge:${project.neoforge_version}"

    // Cloth
    modImplementation "me.shedaniel.cloth:cloth-config-neoforge:${project.cloth_config_version}"

    // Forgified Fabric API
    modImplementation "org.sinytra.forgified-fabric-api:forgified-fabric-api:${project.forgified_fabric_api_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version, "neoforge_version": project.neoforge_version, "minecraft_version": project.minecraft_version, "cloth_config_version": project.cloth_config_version
    }

    var githubEnv = System.getenv("GITHUB_ENV");
    if (githubEnv != null) {
        Files.writeString(Paths.get(githubEnv), "VERSION=" + project.version + "\n", StandardCharsets.UTF_8, StandardOpenOption.APPEND);
        Files.writeString(Paths.get(githubEnv), "MOD_NAME=" + project.archives_name + "\n", StandardCharsets.UTF_8, StandardOpenOption.APPEND);
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        maven(MavenPublication) {
            artifactId = project.archives_name + "-" + project.mod_loader
            version = project.mod_version

            artifact jar
            artifact remapJar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            name = "Local"
            url = file("build/repo").toURI()
        }
    }
}